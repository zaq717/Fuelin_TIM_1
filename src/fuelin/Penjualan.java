package fuelin;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.print.*;
import javax.print.attribute.*;
import javax.print.attribute.standard.*;
import java.io.*;
import javax.swing.UIManager;

/**
 *
 * @author binak
 */
public class Penjualan extends javax.swing.JPanel {

    /**
     * Creates new form Dashboard
     */
    public Penjualan() {
        try {
            UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatLightLaf());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        initComponents();
        comboJenis();
        tampilTabel();

// Grouping radio button biar hanya boleh pilih salah satu
        ButtonGroup group = new ButtonGroup();
        group.add(rbLiter);
        group.add(rbUang);

// Tambahkan aksi untuk mengubah teks label
        rbUang.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                lbJumlah.setText("Masukkan Jumlah Uang :");
            }
        });

        rbLiter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                lbJumlah.setText("Masukkan Jumlah Liter  :");
            }
        });

        reset();
        dispLiter.setEditable(false);
        dispTotalBayar.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    int idPenjualanTerpilih = 0;

    void reset() {
        tfJumlah.setText(null);
        cbJenisBBM.setSelectedItem(null);
        dispLiter.setText(null);
        dispTotalBayar.setText(null);
        rbLiter.setSelected(false);
        rbUang.setSelected(false);
    }

    void comboJenis() {
        try {
            String sql = "SELECT*FROM bbm WHERE total_stok>0";
            Connection conn = Koneksi.konek();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cbJenisBBM.addItem(rs.getString("nama_bbm"));
            }
        } catch (SQLException e) {

        }
        cbJenisBBM.setSelectedItem(null);
    }

    void tampilTabel() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID ");
        model.addColumn("Tanggal");
        model.addColumn("Jenis BBM");
        model.addColumn("Jumlah");
        model.addColumn("Harga");
        model.addColumn("Total Harga");

        String sql = "SELECT * FROM penjualan ORDER BY id_transaksi DESC";
        ;
        try {
            Connection conn = Koneksi.konek();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int id = rs.getInt("id_transaksi");
                String tgl = rs.getString("tanggal");
                String nama = rs.getString("jenis_bbm");
                String jumlahliter = rs.getString("jumlah_liter");
                String hargaJual = rs.getString("harga_jual");
                String totharga = rs.getString("total_harga");
                Object[] baris = {id, tgl, nama, jumlahliter + " L", hargaJual, totharga};
                model.addRow(baris);
            }
        } catch (SQLException sQLException) {
            JOptionPane.showMessageDialog(null, "Gagal Memuat Data");
        }
        tbPenjualan.setModel(model);
    }

    void hitungTotal() {
        try {
            String jenisBBM = cbJenisBBM.getSelectedItem().toString();
            double hargaPerLiter = 0;
            double stokTersedia = 0;
            double jumlah = 0;

            Connection conn = Koneksi.konek();

            // Mendapatkan harga jual dan stok dari tabel stok
            String sql = "SELECT harga_jual, total_stok FROM bbm WHERE nama_bbm = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, jenisBBM);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                hargaPerLiter = rs.getDouble("harga_jual");
                stokTersedia = rs.getDouble("total_stok");
            } else {
                JOptionPane.showMessageDialog(null, "Data BBM tidak ditemukan.");
                return;
            }

            DecimalFormat formatter = new DecimalFormat("#,###.00");

            if (rbLiter.isSelected()) {
                jumlah = Double.parseDouble(tfJumlah.getText()); // Jumlah liter

                // Cek apakah stok cukup
                if (jumlah > stokTersedia) {
                    JOptionPane.showMessageDialog(null, "Stok BBM tidak cukup sisa stok " + stokTersedia + " liter.");
                    return;
                }

                double totalHarga = jumlah * hargaPerLiter;
                dispLiter.setText(String.format("%.2f", jumlah));
                dispTotalBayar.setText(formatter.format(totalHarga));

            } else if (rbUang.isSelected()) {
                double uang = Double.parseDouble(tfJumlah.getText());
                jumlah = uang / hargaPerLiter;

                // Cek apakah stok cukup
                if (jumlah > stokTersedia) {
                    JOptionPane.showMessageDialog(null, "Stok BBM tidak cukup sisa stok " + stokTersedia + " liter.");
                    return;
                }

                dispLiter.setText(String.format("%.2f", jumlah));
                dispTotalBayar.setText(formatter.format(uang));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Input tidak valid: " + e.getMessage());
        }
    }

    void simpanPenjualan() {
        try {
            // Memastikan ComboBox tidak kosong
            if (cbJenisBBM.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(null, "Pilih Jenis BBM terlebih dahulu.");
                return;
            }

            // Mendapatkan jenis BBM yang dipilih dari ComboBox
            String jenisBBM = cbJenisBBM.getSelectedItem().toString();

            // Mengambil total harga dan jumlah liter dari TextField
            String totalBayar = dispTotalBayar.getText();
            double totalHarga = Double.parseDouble(totalBayar.replace(".", "").replace(",", "."));  // Ganti koma dengan titik

            String totalLiter = dispLiter.getText();
            double jumlahLiter = Double.parseDouble(totalLiter.replace(",", "."));  // Ganti koma dengan titik

            // Mendapatkan harga jual dari tabel bbm berdasarkan jenis BBM
            double hargaJual = 0;
            String idBBM = "0"; // Inisialisasi id_stok
            String sqlHargaJual = "SELECT harga_jual, id_bbm FROM bbm WHERE nama_bbm = ?";
            Connection conn = Koneksi.konek();
            PreparedStatement psHargaJual = conn.prepareStatement(sqlHargaJual);
            psHargaJual.setString(1, jenisBBM);
            ResultSet rsHargaJual = psHargaJual.executeQuery();

            if (rsHargaJual.next()) {
                hargaJual = rsHargaJual.getDouble("harga_jual");
                idBBM = rsHargaJual.getString("id_bbm");  // Ambil id_bbm dari hasil query
            } else {
                JOptionPane.showMessageDialog(null, "Harga dan ID bbm untuk BBM " + jenisBBM + " tidak ditemukan.");
                return;
            }

            // Format untuk mendapatkan tanggal dan waktu saat ini
            String format = "yyyy-MM-dd HH:mm:ss";
            SimpleDateFormat sdf = new SimpleDateFormat(format);
            String currentDateTime = sdf.format(new Date());

            // Query untuk menyimpan penjualan ke dalam database
            String sql = "INSERT INTO penjualan (tanggal, jenis_bbm, jumlah_liter, harga_jual, total_harga,id_bbm) VALUES (?, ?, ?, ?, ?,?)";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, currentDateTime);  // Menyimpan tanggal dan waktu penjualan
            ps.setString(2, jenisBBM);         // Menyimpan jenis BBM
            ps.setDouble(3, jumlahLiter);      // Menyimpan jumlah liter
            ps.setDouble(4, hargaJual);        // Menyimpan harga jual
            ps.setDouble(5, totalHarga);       // Menyimpan total harga
            ps.setString(6, idBBM);             // Menyimpan id_bbm sebagai foreign key

            // Eksekusi update dan tampilkan pesan
            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Transaksi Berhasil!");
                tampilTabel(); // Untuk menampilkan Penjualan yang baru disimpan
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Transaksi Gagal: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Input format tidak valid: " + e.getMessage());
        }
        reset();
    }

    void cetakStruk(int idPenjualan) {
        try {
            Connection conn = Koneksi.konek();
            String sql = "SELECT * FROM penjualan WHERE id_transaksi = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, idPenjualan);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String tanggal = rs.getString("tanggal");
                String jenisBBM = rs.getString("jenis_bbm");
                double harga = rs.getDouble("harga_jual");
                double liter = rs.getDouble("jumlah_liter");
                double total = rs.getDouble("total_harga");

                String isiStruk = "\n";
                isiStruk += "\u001B\u0045\u0001"; // Bold ON
                isiStruk += "         CPM INDONESIA\n";
                isiStruk += "\u001B\u0045\u0000"; // Bold OFF
                isiStruk += "   Dsn.Sembung Ds.Margopatut \n";
                isiStruk += "       Kec.Sawahan 64475     \n\n";
                isiStruk += "Waktu   : " + tanggal + "\n\n";
                isiStruk += "------------------------------\n\n";
                isiStruk += "BBM     : " + jenisBBM + "\n";
                isiStruk += "Liter   : " + liter + " L\n";
                isiStruk += "Harga   : Rp." + String.format("%,.0f", harga) + "\n";
                isiStruk += "\u001B\u0045\u0001"; // Aktifkan Bold
                isiStruk += "Total   : Rp." + String.format("%,.0f", total) + "\n\n";
                isiStruk += "\u001B\u0045\u0000"; // Nonaktifkan Bold
                isiStruk += "------------------------------\n\n";
                isiStruk += "  TERIMA KASIH SELAMAT JALAN\n";
                isiStruk += "     Powered by : Fuelin\n";
                isiStruk += "\n\n\n";

                PrintService service = PrintServiceLookup.lookupDefaultPrintService();
                byte[] data = isiStruk.getBytes("UTF-8");
                DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc = new SimpleDoc(data, flavor, null);
                DocPrintJob job = service.createPrintJob();
                job.print(doc, null);
            }

            rs.close();
            ps.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Gagal cetak struk: " + e.getMessage());
        }
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        lbJenisBBM = new javax.swing.JLabel();
        cbJenisBBM = new javax.swing.JComboBox<>();
        lbJumlah = new javax.swing.JLabel();
        tfJumlah = new javax.swing.JTextField();
        rbLiter = new javax.swing.JRadioButton();
        rbUang = new javax.swing.JRadioButton();
        lbJmlhLiter = new javax.swing.JLabel();
        dispLiter = new javax.swing.JTextField();
        lbTotalBayar = new javax.swing.JLabel();
        dispTotalBayar = new javax.swing.JTextField();
        btnHitung = new javax.swing.JButton();
        btnBayar = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPenjualan = new javax.swing.JTable();
        btnReset = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(662, 507));

        lbJenisBBM.setText("Jenis BBM                          :");

        cbJenisBBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbJenisBBMActionPerformed(evt);
            }
        });

        lbJumlah.setText("                                           :");

        tfJumlah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfJumlahActionPerformed(evt);
            }
        });

        rbLiter.setText("Liter");
        rbLiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLiterActionPerformed(evt);
            }
        });

        rbUang.setText("Uang");
        rbUang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbUangActionPerformed(evt);
            }
        });

        lbJmlhLiter.setText("Liter                                   :");

        lbTotalBayar.setText("Total Bayar                       :");

        btnHitung.setBackground(new java.awt.Color(0, 0, 255));
        btnHitung.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnHitung.setForeground(new java.awt.Color(255, 255, 255));
        btnHitung.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/icons8-calculator-20.png"))); // NOI18N
        btnHitung.setText("Hitung");
        btnHitung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitungActionPerformed(evt);
            }
        });

        btnBayar.setBackground(new java.awt.Color(255, 165, 0));
        btnBayar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBayar.setForeground(new java.awt.Color(255, 255, 255));
        btnBayar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/icons8-pay-20.png"))); // NOI18N
        btnBayar.setText("Bayar");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });

        btnPrint.setBackground(new java.awt.Color(0, 128, 0));
        btnPrint.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/icons8-print-20.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        tbPenjualan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbPenjualan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPenjualanMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbPenjualan);

        btnReset.setBackground(new java.awt.Color(0, 51, 255));
        btnReset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/icons8-reset-20 (1).png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbJmlhLiter)
                                    .addComponent(lbTotalBayar)
                                    .addComponent(lbJumlah, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfJumlah)
                                    .addComponent(dispLiter)
                                    .addComponent(dispTotalBayar)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHitung, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBayar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPrint)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnReset)
                                        .addGap(0, 6, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbJenisBBM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(rbUang)
                                        .addGap(54, 54, 54)
                                        .addComponent(rbLiter)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(cbJenisBBM, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbJenisBBM)
                    .addComponent(cbJenisBBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbUang)
                    .addComponent(rbLiter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbJumlah))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbJmlhLiter)
                    .addComponent(dispLiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dispTotalBayar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTotalBayar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHitung)
                    .addComponent(btnBayar)
                    .addComponent(btnPrint)
                    .addComponent(btnReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void cbJenisBBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJenisBBMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbJenisBBMActionPerformed

    private void rbUangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbUangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbUangActionPerformed

    private void btnHitungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitungActionPerformed
        hitungTotal();
    }//GEN-LAST:event_btnHitungActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBayarActionPerformed
        simpanPenjualan();
    }//GEN-LAST:event_btnBayarActionPerformed

    private void tfJumlahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfJumlahActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfJumlahActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void tbPenjualanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPenjualanMouseClicked
        int row = tbPenjualan.getSelectedRow();
        if (row != -1) {
            idPenjualanTerpilih = Integer.parseInt(tbPenjualan.getValueAt(row, 0).toString());
        }
    }//GEN-LAST:event_tbPenjualanMouseClicked

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        if (idPenjualanTerpilih != 0) {
            cetakStruk(idPenjualanTerpilih); // cetak yang diklik
        } else {
            JOptionPane.showMessageDialog(null, "klik transaksi yang mau di print");
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void rbLiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLiterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbLiterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnHitung;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cbJenisBBM;
    private javax.swing.JTextField dispLiter;
    private javax.swing.JTextField dispTotalBayar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbJenisBBM;
    private javax.swing.JLabel lbJmlhLiter;
    private javax.swing.JLabel lbJumlah;
    private javax.swing.JLabel lbTotalBayar;
    private javax.swing.JRadioButton rbLiter;
    private javax.swing.JRadioButton rbUang;
    private javax.swing.JTable tbPenjualan;
    private javax.swing.JTextField tfJumlah;
    // End of variables declaration//GEN-END:variables
}
